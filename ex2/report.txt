1.

Input Space: nemployee >= 0, starttime >= 0, endtime >= 0 (nemploye, starttime, endtime in 0, ... , max_int)

Block #1: starttime > endtime
          test_Schedule_StartTimeGreaterThanEndTime: input: "starttime = 8, endtime = 2, nemploye = 1", expected: readSchedule = postReadSchedule

Block #2 endtime >= starttime, nemployee > len(workingEmployees)
        (endtime = 9, starttime = 0, nemployee = 3, len(workingEmployees) = 2)
        test_Schedule_nemployeGreaterThanWorkers: input: "starttime = 0, endtime = 9, nemploye = 3", expected: len(workingEmployees) = 2, requiredNumber(0, 9) = 3

        (Ändrade requiredNumber från 1 till 2, eftersom setNewRequired ska ändra till input arg eller?? kan tolka fel)
Block #3
        endtime >= starttime, nemployee < len(workingEmployees)
        (endtime = 9, starttime = 0, nemployee = 1, len(workingEmployees) = 2)
        test_Schedule_DiscardingWorkers: input: "starttime = 0, endtime = 9, nemploye = 1", expected: len(workingEmployees) = 1, requiredNumber(0, 9) = 1

Border Cases:

starttime = endtime
workingemployes = full
nemployes = full
nemployes = 0

Explanation of the tests:
    * Block #1: Tests if the function returns the same schedule if the starttime is greater than the endtime
    * Block #2: Tests if the function adds the correct number of required employees to the schedule if the value of nemployee is greater than the number of employees already in the schedule
    * Block #3: Tests if the function removes the correct number of employees from the schedule if the number of employees is less than the number of employees already in the schedule

Found Bugs:
    * Block #3 (endtime >= starttime, nemployee < len(workingEmployees))
        * len(workingEmployees, expected: 1, got: 0


2.
next Incomplete: currentttime >= 0, currenttime < size (size in 0, ..., max_int), currenttime in (min_int, ... , size)

Block #1 (currenttime >= 0, size > currenttime, workingemployees(0) < requiredNumber, workingemployees(1...n) <= requiredNumber)
        (currentttime = 1, size = 3, workingemployees(0) = 1, workingemployees( 1... n) = 3, requiredNumber = 5)
         test_Schedule_firstHour: #input: "currenttime = 0, size = 3, workingemployees(1, 2) = 1, workingemployees(2) = 0, requiredNumber = 1", expected: 0

Block #2 (currenttime >= 0, size > currenttime, workingemployees at (0, 1) = requiredNumber, workingemployees(2, 3) < requiredNumber ##size has to be large enough for there to be a defined middle.
                                                                                                                                            #Testing with size = 5, so starttime is not equal to endtime. 
         test_Schedule_middleHour: input: "", currenttime = 0, size = 5, requiredNumber = 1, len(workingemployees(0, 1)) = 1, expected: 2 

Block #3 (currenttime >= 0, size > currenttime, workingemployees at (0. 1) = requiredNumber, workingemployees(2) < requiredNumber
         test_Schedule_hourNotFilled() #input: "currenttime = 0, size = 3, workingemployees(0, 1) = 1, workingemployees(2) = 0, requiredNumber = 1", expected: 2

Border case:
    currenttime min, size ct+1
        #currenttime = 0, size = 1, workingEmployees(0) = 0, requiredNumber = 1
        test_minValues() #Expected : 0

    currenttime high, size ct+1
          #currentTime = 4, size = 5, workingemployees(0 ... 4) = 0, requiredNumber = 1
        test_Schedule_HighValues() #Expected : 4

    workingEmployees full
        #currenttime = 0, size = 3, workingEmployees(0 ... 9) = 1, requiredNumber = 1
        #test_Schedule_allHoursFilled, expected = -1

    workingemployees empty
        #currenttime = 0, size = 3, workingemployees(0...2) = 0, requiredNumber = 1
        test_Schedule_workEmpty() #expected = 0

    requirednumber zero
        #currenttime = 0, size = 3, workingemployees(0...2) = 0, requiredNumber = 0
        test_Schedule_noneRequired() # expected = -1


Explanation of the tests:
        Block #1: Tests if the function correctly identifies the first element when the rest of the hours are a mix of full/empty. 
        Block #2: Tests if the function identifies the middle element, when the prior hours are full.
        Block #3: Tests if the function correctly identifies the last element when the rest of the list is full. 
        Border #1: Tests the lower edge case of currenttime and size for their minimum values. 
        Border #2: Tests nextIncomplete with with the last time-slot. 
        Border #3: Tests if the function returns correctly (-1) if all hours are filled with the required number of employees
        Border #4: Tests when all times are empty
        Border #5: Tests lower edge case of requiredNumber, when requiredNumber = 0. 
